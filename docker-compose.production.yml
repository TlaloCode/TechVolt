version: '3.7'

volumes:
  production_postgres_data: { }
  production_postgres_data_backups: { }
  production_caddy_data: { }


networks:
  training_network_prod:
    name: training_network_prod
    driver: bridge
    ipam:
      driver: default

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: training_fyg_production_django
    container_name: training_fyg_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: django
    networks:
      training_network_prod:
        aliases:
          - django

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: training_fyg_production_postgres
    container_name: training_fyg_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups/production:z
    env_file:
      - ./.envs/.production/.postgres
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: postgres
    networks:
      training_network_prod:
        aliases:
          - postgres

  caddy:
    container_name: training_fyg_production_caddy
    image: caddy:2.3.0-alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
    volumes:
      - production_caddy_data:/data
      - ./compose/production/caddy/Caddyfile:/etc/caddy/Caddyfile
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: caddy
    networks:
      training_network_prod:
        aliases:
          - caddy

  redis:
    image: redis:5
    container_name: training_fyg_redis
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: redis
    networks:
      training_network_prod:
        aliases:
          - redis

  celeryworker:
    <<: *django
    image: training_fyg_production_celeryworker
    container_name: training_fyg_production_celeryworker
    command: /start-celeryworker
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: celeryworker
    networks:
      training_network_prod:
        aliases:
          - celeryworker

  celerybeat:
    <<: *django
    image: training_fyg_production_celerybeat
    container_name: training_fyg_production_celerybeat
    command: /start-celerybeat
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: celerybeat
    networks:
      training_network_prod:
        aliases:
          - celerybeat

  flower:
    <<: *django
    image: training_fyg_production_flower
    container_name: training_fyg_production_flower
    command: /start-flower
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: flower
    networks:
      training_network_prod:
        aliases:
          - flower
  awscli:
    build:
      context: .
      dockerfile: ./compose/production/aws/Dockerfile
    image: training_fyg_production_awscli
    container_name: training_fyg_production_awscli
    env_file:
      - ./.envs/.production/.django
    volumes:
      - production_postgres_data_backups:/backups/production:z
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: Training-PROD
#        awslogs-stream: awscli
    networks:
      training_network_prod:
        aliases:
          - awscli
